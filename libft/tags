!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANSI_BLACK	includes/libft_define.h	/^# define ANSI_BLACK	/;"	d
ANSI_BLINK	includes/libft_define.h	/^# define ANSI_BLINK	/;"	d
ANSI_BLUE	includes/libft_define.h	/^# define ANSI_BLUE	/;"	d
ANSI_BOLD	includes/libft_define.h	/^# define ANSI_BOLD	/;"	d
ANSI_CYAN	includes/libft_define.h	/^# define ANSI_CYAN	/;"	d
ANSI_DARK_GRAY	includes/libft_define.h	/^# define ANSI_DARK_GRAY	/;"	d
ANSI_GREEN	includes/libft_define.h	/^# define ANSI_GREEN	/;"	d
ANSI_LIGHT_BLUE	includes/libft_define.h	/^# define ANSI_LIGHT_BLUE	/;"	d
ANSI_LIGHT_CYAN	includes/libft_define.h	/^# define ANSI_LIGHT_CYAN	/;"	d
ANSI_LIGHT_GRAY	includes/libft_define.h	/^# define ANSI_LIGHT_GRAY	/;"	d
ANSI_LIGHT_GREEN	includes/libft_define.h	/^# define ANSI_LIGHT_GREEN	/;"	d
ANSI_LIGHT_MAGENTA	includes/libft_define.h	/^# define ANSI_LIGHT_MAGENTA	/;"	d
ANSI_LIGHT_RED	includes/libft_define.h	/^# define ANSI_LIGHT_RED	/;"	d
ANSI_LIGHT_YELLOW	includes/libft_define.h	/^# define ANSI_LIGHT_YELLOW	/;"	d
ANSI_MAGENTA	includes/libft_define.h	/^# define ANSI_MAGENTA	/;"	d
ANSI_MATRIX	includes/libft_define.h	/^# define ANSI_MATRIX	/;"	d
ANSI_RED	includes/libft_define.h	/^# define ANSI_RED	/;"	d
ANSI_RESET	includes/libft_define.h	/^# define ANSI_RESET	/;"	d
ANSI_UNDERLINED	includes/libft_define.h	/^# define ANSI_UNDERLINED	/;"	d
ANSI_WHITE	includes/libft_define.h	/^# define ANSI_WHITE	/;"	d
ANSI_YELLOW	includes/libft_define.h	/^# define ANSI_YELLOW	/;"	d
A_KEY	includes/libft_define.h	/^# define A_KEY	/;"	d
BUFF_SIZE	includes/libft_define.h	/^# define BUFF_SIZE /;"	d
BUTTON1MOTIONMASK	includes/libft_define.h	/^# define BUTTON1MOTIONMASK	/;"	d
BUTTON2MOTIONMASK	includes/libft_define.h	/^# define BUTTON2MOTIONMASK	/;"	d
BUTTON3MOTIONMASK	includes/libft_define.h	/^# define BUTTON3MOTIONMASK	/;"	d
BUTTON4MOTIONMASK	includes/libft_define.h	/^# define BUTTON4MOTIONMASK	/;"	d
BUTTON5MOTIONMASK	includes/libft_define.h	/^# define BUTTON5MOTIONMASK	/;"	d
BUTTONMOTIONMASK	includes/libft_define.h	/^# define BUTTONMOTIONMASK	/;"	d
BUTTONPRESS	includes/libft_define.h	/^# define BUTTONPRESS	/;"	d
BUTTONPRESSMASK	includes/libft_define.h	/^# define BUTTONPRESSMASK	/;"	d
BUTTONRELEASE	includes/libft_define.h	/^# define BUTTONRELEASE	/;"	d
BUTTONRELEASEMASK	includes/libft_define.h	/^# define BUTTONRELEASEMASK	/;"	d
B_KEY	includes/libft_define.h	/^# define B_KEY	/;"	d
CMP	Makefile	/^CMP		=	gcc$/;"	m
COLORMAPCHANGEMASK	includes/libft_define.h	/^# define COLORMAPCHANGEMASK	/;"	d
CTRL	includes/libft_define.h	/^# define CTRL	/;"	d
CTYPEPATH	Makefile	/^CTYPEPATH = ctype\/$/;"	m
C_KEY	includes/libft_define.h	/^# define C_KEY	/;"	d
DEBC	Makefile	/^DEBC		=	\\033[36m$/;"	m
DEBUG_F	Makefile	/^DEBUG_F	=	-g3 -fsanitize=address$/;"	m
DESTROYNOTIFY	includes/libft_define.h	/^# define DESTROYNOTIFY	/;"	d
DOT_KEY	includes/libft_define.h	/^# define DOT_KEY	/;"	d
DOWN	includes/libft_define.h	/^# define DOWN	/;"	d
D_KEY	includes/libft_define.h	/^# define D_KEY	/;"	d
EIGHT	includes/libft_define.h	/^# define EIGHT	/;"	d
ENTER	includes/libft_define.h	/^# define ENTER	/;"	d
ENTERWINDOWMASK	includes/libft_define.h	/^# define ENTERWINDOWMASK	/;"	d
EQUAL	includes/libft_define.h	/^# define EQUAL	/;"	d
ERC	Makefile	/^ERC			=	\\033[31m$/;"	m
ERROR	includes/libft_define.h	/^# define ERROR	/;"	d
ESC	includes/libft_define.h	/^# define ESC	/;"	d
EXPOSE	includes/libft_define.h	/^# define EXPOSE	/;"	d
EXPOSUREMASK	includes/libft_define.h	/^# define EXPOSUREMASK	/;"	d
EXT	Makefile	/^EXT		=	Makefile$/;"	m
E_KEY	includes/libft_define.h	/^# define E_KEY	/;"	d
FDPATH	Makefile	/^FDPATH = fd\/$/;"	m
FD_MAX	includes/libft_define.h	/^# define FD_MAX	/;"	d
FIVE	includes/libft_define.h	/^# define FIVE	/;"	d
FLAGS	Makefile	/^FLAGS	=	-Wall -Wextra -Werror$/;"	m
FOCUSCHANGEMASK	includes/libft_define.h	/^# define FOCUSCHANGEMASK	/;"	d
FOUR	includes/libft_define.h	/^# define FOUR	/;"	d
F_KEY	includes/libft_define.h	/^# define F_KEY	/;"	d
GFXPATH	Makefile	/^GFXPATH = gfx\/$/;"	m
G_KEY	includes/libft_define.h	/^# define G_KEY	/;"	d
H_KEY	includes/libft_define.h	/^# define H_KEY	/;"	d
INCDIR	Makefile	/^INCDIR = .\/includes$/;"	m
INCS	Makefile	/^INCS = $(addprefix -I, $(INCS_DIRS))$/;"	m
INCS_DIRS	Makefile	/^INCS_DIRS = $(addsuffix \/, $(INCDIR))$/;"	m
INTPATH	Makefile	/^INTPATH = int\/$/;"	m
I_KEY	includes/libft_define.h	/^# define I_KEY	/;"	d
J_KEY	includes/libft_define.h	/^# define J_KEY	/;"	d
KEYMAPSTATEMASK	includes/libft_define.h	/^# define KEYMAPSTATEMASK	/;"	d
KEYPRESS	includes/libft_define.h	/^# define KEYPRESS	/;"	d
KEYPRESSMASK	includes/libft_define.h	/^# define KEYPRESSMASK	/;"	d
KEYRELEASE	includes/libft_define.h	/^# define KEYRELEASE	/;"	d
KEYRELEASEMASK	includes/libft_define.h	/^# define KEYRELEASEMASK	/;"	d
K_KEY	includes/libft_define.h	/^# define K_KEY	/;"	d
LEAVEWINDOWMASK	includes/libft_define.h	/^# define LEAVEWINDOWMASK	/;"	d
LEFT	includes/libft_define.h	/^# define LEFT	/;"	d
LIBFT_DEFINE_H	includes/libft_define.h	/^# define LIBFT_DEFINE_H$/;"	d
LIBFT_H	includes/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_STRUCT_H	includes/libft_struct.h	/^# define LIBFT_STRUCT_H$/;"	d
LISTPATH	Makefile	/^LISTPATH = list\/$/;"	m
L_KEY	includes/libft_define.h	/^# define L_KEY	/;"	d
MATHPATH	Makefile	/^MATHPATH = math\/$/;"	m
MAX_INT	includes/libft_define.h	/^# define MAX_INT	/;"	d
MAX_INT_DECIMAL	includes/libft_define.h	/^# define MAX_INT_DECIMAL	/;"	d
MEMPATH	Makefile	/^MEMPATH = mem\/$/;"	m
MINUS	includes/libft_define.h	/^# define MINUS	/;"	d
MIN_INT	includes/libft_define.h	/^# define MIN_INT	/;"	d
MOUSE_LEFT	includes/libft_define.h	/^# define MOUSE_LEFT	/;"	d
MOUSE_RIGHT	includes/libft_define.h	/^# define MOUSE_RIGHT	/;"	d
MOUSE_SIDE	includes/libft_define.h	/^# define MOUSE_SIDE	/;"	d
M_KEY	includes/libft_define.h	/^# define M_KEY	/;"	d
NAME	Makefile	/^NAME	=	libft.a$/;"	m
NINE	includes/libft_define.h	/^# define NINE	/;"	d
NOC	Makefile	/^NOC			=	\\033[0m$/;"	m
NOEVENTMASK	includes/libft_define.h	/^# define NOEVENTMASK	/;"	d
NOTIFY	includes/libft_define.h	/^# define NOTIFY	/;"	d
N_KEY	includes/libft_define.h	/^# define N_KEY	/;"	d
OBJDIR	Makefile	/^OBJDIR = .\/objs\/$/;"	m
OBJS	Makefile	/^OBJS 	=	$(SRCS:.c=.o)$/;"	m
OBJS	Makefile	/^OBJS = $(addprefix $(OBJDIR), $(addsuffix .o, $(basename $(SRC))))$/;"	m
OBJS_DIRS	Makefile	/^OBJS_DIRS = $(sort $(dir $(OBJS)))$/;"	m
OK	includes/libft_define.h	/^# define OK	/;"	d
OKC	Makefile	/^OKC			=	\\033[32m$/;"	m
ONE	includes/libft_define.h	/^# define ONE	/;"	d
OWNERGRABBUTTONMASK	includes/libft_define.h	/^# define OWNERGRABBUTTONMASK	/;"	d
O_KEY	includes/libft_define.h	/^# define O_KEY	/;"	d
PERSOPATH	Makefile	/^PERSOPATH = perso\/$/;"	m
POINTERMOTIONHINTMASK	includes/libft_define.h	/^# define POINTERMOTIONHINTMASK	/;"	d
POINTERMOTIONMASK	includes/libft_define.h	/^# define POINTERMOTIONMASK	/;"	d
PRINTPATH	Makefile	/^PRINTPATH = print\/$/;"	m
PROPERTYCHANGEMASK	includes/libft_define.h	/^# define PROPERTYCHANGEMASK	/;"	d
PUTPATH	Makefile	/^PUTPATH = put\/$/;"	m
P_KEY	includes/libft_define.h	/^# define P_KEY	/;"	d
Q_KEY	includes/libft_define.h	/^# define Q_KEY	/;"	d
RANDPATH	Makefile	/^RANDPATH = rand\/$/;"	m
READ_EOF	includes/libft_define.h	/^# define READ_EOF	/;"	d
READ_ERR	includes/libft_define.h	/^# define READ_ERR	/;"	d
READ_OK	includes/libft_define.h	/^# define READ_OK	/;"	d
RESIZEREDIRECTMASK	includes/libft_define.h	/^# define RESIZEREDIRECTMASK	/;"	d
RIGHT	includes/libft_define.h	/^# define RIGHT	/;"	d
R_KEY	includes/libft_define.h	/^# define R_KEY	/;"	d
SEVEN	includes/libft_define.h	/^# define SEVEN	/;"	d
SIX	includes/libft_define.h	/^# define SIX	/;"	d
SLASH	includes/libft_define.h	/^# define SLASH	/;"	d
SLASH_KEY	includes/libft_define.h	/^# define SLASH_KEY	/;"	d
SRC	Makefile	/^SRC		=	$(MEMPATH)ft_memset.c\\$/;"	m
SRC	Makefile	/^SRC := $(filter $(addprefix %, .c), $(SRC))$/;"	m
SRCDIR	Makefile	/^SRCDIR = .\/srcs\/$/;"	m
SRCS	Makefile	/^SRCS = $(addprefix $(SRCDIR), $(SRC))$/;"	m
STAR	includes/libft_define.h	/^# define STAR	/;"	d
STDLIBPATH	Makefile	/^STDLIBPATH = stdlib\/$/;"	m
STRPATH	Makefile	/^STRPATH = str\/$/;"	m
STRUCTURENOTIFYMASK	includes/libft_define.h	/^# define STRUCTURENOTIFYMASK	/;"	d
SUBSTRUCTURENOTIFYMASK	includes/libft_define.h	/^# define SUBSTRUCTURENOTIFYMASK	/;"	d
SUBSTRUCTUREREDIRECTMASK	includes/libft_define.h	/^# define SUBSTRUCTUREREDIRECTMASK	/;"	d
S_KEY	includes/libft_define.h	/^# define S_KEY	/;"	d
TABPATH	Makefile	/^TABPATH = tab\/$/;"	m
THREE	includes/libft_define.h	/^# define THREE	/;"	d
TWO	includes/libft_define.h	/^# define TWO	/;"	d
T_KEY	includes/libft_define.h	/^# define T_KEY	/;"	d
UP	includes/libft_define.h	/^# define UP	/;"	d
U_KEY	includes/libft_define.h	/^# define U_KEY	/;"	d
VISIBILITYCHANGEMASK	includes/libft_define.h	/^# define VISIBILITYCHANGEMASK	/;"	d
V_KEY	includes/libft_define.h	/^# define V_KEY	/;"	d
WAC	Makefile	/^WAC			=	\\033[33m$/;"	m
WHEEL_DOWN	includes/libft_define.h	/^# define WHEEL_DOWN	/;"	d
WHEEL_UP	includes/libft_define.h	/^# define WHEEL_UP	/;"	d
W_KEY	includes/libft_define.h	/^# define W_KEY	/;"	d
X_KEY	includes/libft_define.h	/^# define X_KEY	/;"	d
Y_KEY	includes/libft_define.h	/^# define Y_KEY	/;"	d
ZERO	includes/libft_define.h	/^# define ZERO	/;"	d
Z_KEY	includes/libft_define.h	/^# define Z_KEY	/;"	d
b	includes/libft_struct.h	/^	unsigned char	b;$/;"	m	struct:s_color
bbp	includes/libft_struct.h	/^	int				bbp;$/;"	m	struct:s_img
buffer	includes/libft_struct.h	/^	t_str			*buffer;$/;"	m	struct:s_fd
c	includes/libft_struct.h	/^	char			c;$/;"	m	struct:s_str
content	includes/libft_struct.h	/^	void			*content;$/;"	m	struct:s_list
content_size	includes/libft_struct.h	/^	size_t			content_size;$/;"	m	struct:s_list
copy_buff	srcs/perso/get_next_line.c	/^static int			copy_buff(t_str **buffer, char *src)$/;"	f	file:
custom	srcs/fd/ft_create_file.c	/^static void	custom(char *command, char *tmp, char *file_path, int mode)$/;"	f	file:
endian	includes/libft_struct.h	/^	int				endian;$/;"	m	struct:s_img
fd	includes/libft_struct.h	/^	int				fd;$/;"	m	struct:s_fd
flags	includes/libft_struct.h	/^	int				flags;$/;"	m	struct:s_fd
ft_abs	srcs/math/ft_abs.c	/^int		ft_abs(int a)$/;"	f
ft_atoi	srcs/stdlib/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_bzero	srcs/mem/ft_bzero.c	/^void		ft_bzero(void *s, size_t n)$/;"	f
ft_bzerotab	srcs/mem/ft_bzerotab.c	/^void		ft_bzerotab(void **tab)$/;"	f
ft_checkdigit	srcs/ctype/ft_checkdigit.c	/^int			ft_checkdigit(char *str)$/;"	f
ft_checkhexa	srcs/ctype/ft_checkhexa.c	/^int					ft_checkhexa(char *str)$/;"	f
ft_checkint	srcs/ctype/ft_checkint.c	/^int			ft_checkint(char *str)$/;"	f
ft_close	srcs/fd/ft_close.c	/^int	ft_close(t_fd *fd)$/;"	f
ft_color	srcs/gfx/ft_color.c	/^void	ft_color(t_color *clr, \\$/;"	f
ft_colorcpy	srcs/gfx/ft_colorcpy.c	/^void	ft_colorcpy(t_color *clr_from, t_color *clr_to)$/;"	f
ft_colornew	srcs/gfx/ft_colornew.c	/^t_color			*ft_colornew(unsigned char r, unsigned char g, \\$/;"	f
ft_colorparse	srcs/gfx/ft_colorparse.c	/^t_color		*ft_colorparse(char *arg)$/;"	f
ft_colortohex	srcs/gfx/ft_colortohex.c	/^int			ft_colortohex(t_color *col)$/;"	f
ft_create_file	srcs/fd/ft_create_file.c	/^size_t		ft_create_file(t_fd *fd, int chmod)$/;"	f
ft_fd_delete	srcs/fd/ft_fd_delete.c	/^void		ft_fd_delete(t_fd *fd)$/;"	f
ft_flipcolumn	srcs/tab/ft_v_flip.c	/^static void	ft_flipcolumn(void **array, size_t column, size_t rows,\\$/;"	f	file:
ft_fliprow	srcs/tab/ft_h_flip.c	/^static void	ft_fliprow(void *row, size_t columns, size_t nbytes)$/;"	f	file:
ft_ftoa	srcs/stdlib/ft_ftoa.c	/^char		*ft_ftoa(float f)$/;"	f
ft_getnbr	srcs/int/ft_getnbr.c	/^int		ft_getnbr(char *str)$/;"	f
ft_h_flip	srcs/tab/ft_h_flip.c	/^void		ft_h_flip(void **array, size_t columns, size_t rows, size_t nbytes)$/;"	f
ft_hash	srcs/rand/ft_hash.c	/^unsigned long		ft_hash(unsigned char *str)$/;"	f
ft_hash32	srcs/rand/ft_hash32.c	/^uint32_t	ft_hash32(uint32_t val)$/;"	f
ft_hexcolor	srcs/gfx/ft_hexcolor.c	/^t_color			*ft_hexcolor(int hexvalue)$/;"	f
ft_hextocolor	srcs/gfx/ft_hextocolor.c	/^void			ft_hextocolor(t_color *col, int hexvalue)$/;"	f
ft_imgclean	srcs/gfx/ft_imgclean.c	/^void				ft_imgclean(t_img *img, size_t width, size_t height)$/;"	f
ft_imgdel	srcs/gfx/ft_imgdel.c	/^void			ft_imgdel(t_img *img, void *mlx)$/;"	f
ft_imgnew	srcs/gfx/ft_imgnew.c	/^t_img				*ft_imgnew(void *mlx, size_t x, size_t y)$/;"	f
ft_initwindow	srcs/gfx/ft_initwindow.c	/^t_mlx		*ft_initwindow(char *name, size_t width, size_t height)$/;"	f
ft_intdup	srcs/int/ft_intdup.c	/^int			*ft_intdup(int *array, size_t width)$/;"	f
ft_intlen	srcs/int/ft_intlen.c	/^size_t	ft_intlen(int nbr)$/;"	f
ft_intmax	srcs/int/ft_intmax.c	/^int		ft_intmax(int *array, size_t size)$/;"	f
ft_intmin	srcs/int/ft_intmin.c	/^int		ft_intmin(int *array, size_t size)$/;"	f
ft_isalnum	srcs/ctype/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	srcs/ctype/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	srcs/ctype/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	srcs/ctype/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_ishexa	srcs/ctype/ft_ishexa.c	/^int			ft_ishexa(int c)$/;"	f
ft_isint	srcs/ctype/ft_isint.c	/^int		ft_isint(int c)$/;"	f
ft_isnegative	srcs/stdlib/ft_itoa.c	/^static void		ft_isnegative(int *n, int *negative)$/;"	f	file:
ft_isprint	srcs/ctype/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	srcs/ctype/ft_isspace.c	/^int		ft_isspace(int c)$/;"	f
ft_itoa	srcs/stdlib/ft_itoa.c	/^char			*ft_itoa(int n)$/;"	f
ft_letters	srcs/str/ft_strsplit.c	/^static unsigned int		ft_letters(char const *s, char c, int i)$/;"	f	file:
ft_lines	srcs/str/ft_strsplit.c	/^static unsigned int		ft_lines(char const *s, char c)$/;"	f	file:
ft_lstadd	srcs/list/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstaddback	srcs/list/ft_lstaddback.c	/^void		ft_lstaddback(t_list **alst, t_list *new)$/;"	f
ft_lstaddend	srcs/list/ft_lstaddend.c	/^void	ft_lstaddend(t_list **alst, t_list *new)$/;"	f
ft_lstaddfront	srcs/list/ft_lstaddfront.c	/^void	ft_lstaddfront(t_list **alst, t_list *new)$/;"	f
ft_lstdel	srcs/list/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	srcs/list/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstfree	srcs/list/ft_lstfree.c	/^void		ft_lstfree(t_list **lst)$/;"	f
ft_lstiter	srcs/list/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstlen	srcs/list/ft_lstlen.c	/^int		ft_lstlen(t_list *lst)$/;"	f
ft_lstmap	srcs/list/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	srcs/list/ft_lstnew.c	/^t_list		*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_lstpushback	srcs/list/ft_lstpushback.c	/^t_list		*ft_lstpushback(t_list **alst, void *data, size_t content_size)$/;"	f
ft_lstpushfront	srcs/list/ft_lstpushfront.c	/^t_list	*ft_lstpushfront(t_list **alst, void *data, size_t content_size)$/;"	f
ft_lsttoarray	srcs/list/ft_lsttoarray.c	/^void	**ft_lsttoarray(t_list *lst)$/;"	f
ft_matrixadd	srcs/gfx/ft_matrixadd.c	/^void		ft_matrixadd(double **mat, double **m, double **n, int size)$/;"	f
ft_matrixhomothety	srcs/gfx/ft_matrixhomothety.c	/^void		ft_matrixhomothety(double **mat, int factor)$/;"	f
ft_matrixmult	srcs/gfx/ft_matrixmult.c	/^void		ft_matrixmult(double **mat, double **m, double **n, int size)$/;"	f
ft_matrixonpoint	srcs/gfx/ft_matrixonpoint.c	/^void		ft_matrixonpoint(double **mat, t_vec3 *vec3)$/;"	f
ft_matrixrotx	srcs/gfx/ft_matrixrotx.c	/^void		ft_matrixrotx(double **mat, double deg)$/;"	f
ft_matrixroty	srcs/gfx/ft_matrixroty.c	/^void		ft_matrixroty(double **mat, double deg)$/;"	f
ft_matrixrotz	srcs/gfx/ft_matrixrotz.c	/^void		ft_matrixrotz(double **mat, double deg)$/;"	f
ft_matrixtranslate	srcs/gfx/ft_matrixtranslate.c	/^void		ft_matrixtranslate(double **mat, t_vec3 *vec)$/;"	f
ft_matrixzero	srcs/gfx/ft_matrixzero.c	/^double		**ft_matrixzero(int size)$/;"	f
ft_memalloc	srcs/mem/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	srcs/mem/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memchr	srcs/mem/ft_memchr.c	/^void	*ft_memchr(const void *str, int c, size_t n)$/;"	f
ft_memcmp	srcs/mem/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	srcs/mem/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memdel	srcs/mem/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memdeltab	srcs/mem/ft_memdeltab.c	/^void		ft_memdeltab(void *tab, size_t dimension)$/;"	f
ft_memdup	srcs/mem/ft_memdup.c	/^void		*ft_memdup(const void *mem, size_t size)$/;"	f
ft_memmove	srcs/mem/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	srcs/mem/ft_memset.c	/^void	*ft_memset(void *str, int c, size_t n)$/;"	f
ft_mlx_keytoint	srcs/gfx/ft_mlx_keytoint.c	/^int			ft_mlx_keytoint(int keycode)$/;"	f
ft_mlx_keytoletterchar	srcs/gfx/ft_mlx_keytoletterchar.c	/^char		ft_mlx_keytoletterchar(int keycode)$/;"	f
ft_mlx_keytoletterchar2	srcs/gfx/ft_mlx_keytoletterchar.c	/^static char	ft_mlx_keytoletterchar2(int keycode)$/;"	f	file:
ft_mlx_keytoletterchar3	srcs/gfx/ft_mlx_keytoletterchar.c	/^static char	ft_mlx_keytoletterchar3(int keycode)$/;"	f	file:
ft_mlx_keytonumchar	srcs/gfx/ft_mlx_keytonumchar.c	/^char		ft_mlx_keytonumchar(int keycode)$/;"	f
ft_mlx_printkeytochar	srcs/gfx/ft_mlx_printkeytochar.c	/^char		ft_mlx_printkeytochar(int keycode)$/;"	f
ft_mlxdelete	srcs/gfx/ft_mlxdelete.c	/^void		ft_mlxdelete(t_mlx *mlx, t_img *img)$/;"	f
ft_open	srcs/fd/ft_open.c	/^size_t		ft_open(t_fd *fd, int flags, int rights)$/;"	f
ft_perror	srcs/perso/ft_perror.c	/^void	ft_perror(char *name, char *error, int exit_f)$/;"	f
ft_pixcpy	srcs/gfx/ft_pixcpy.c	/^void		ft_pixcpy(t_pix *pix_from, t_pix *pix_to)$/;"	f
ft_pixnew	srcs/gfx/ft_pixnew.c	/^t_pix		*ft_pixnew(int x, int y, int z)$/;"	f
ft_pixpopulate	srcs/gfx/ft_pixpopulate.c	/^void	ft_pixpopulate(t_pix *to_pix, int x, int y, int z)$/;"	f
ft_pow	srcs/math/ft_pow.c	/^int			ft_pow(int n, int p)$/;"	f
ft_printfloatmatrix	srcs/print/ft_printfloatmatrix.c	/^void		ft_printfloatmatrix(float **mat, size_t size)$/;"	f
ft_printintarray	srcs/print/ft_printintarray.c	/^void		ft_printintarray(int **map, size_t width, size_t height)$/;"	f
ft_printsize_tarray	srcs/print/ft_printsize_tarray.c	/^void		ft_printsize_tarray(size_t **map, size_t width, size_t height)$/;"	f
ft_printstrarray	srcs/print/ft_printstrarray.c	/^void		ft_printstrarray(char **array)$/;"	f
ft_putchar	srcs/put/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	srcs/put/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	srcs/put/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	srcs/put/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	srcs/put/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f
ft_putnbr_fd	srcs/put/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	srcs/put/ft_putstr.c	/^void	ft_putstr(char const *s)$/;"	f
ft_putstr_fd	srcs/put/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_rand	srcs/rand/ft_rand.c	/^uintmax_t		ft_rand(void)$/;"	f
ft_randint	srcs/rand/ft_randint.c	/^uintmax_t		ft_randint(size_t length)$/;"	f
ft_random	srcs/rand/ft_random.c	/^uintmax_t	ft_random(uintmax_t min, uintmax_t max, uintmax_t res)$/;"	f
ft_range_num	srcs/math/ft_range_num.c	/^double		ft_range_num(double input, double i[2], double o[2])$/;"	f
ft_rol	srcs/rand/ft_rol.c	/^unsigned int	ft_rol(const unsigned int value, int shift)$/;"	f
ft_ror	srcs/rand/ft_ror.c	/^unsigned int	ft_ror(const unsigned int value, int shift)$/;"	f
ft_specialchar	srcs/gfx/ft_mlx_printkeytochar.c	/^static char	ft_specialchar(int keycode)$/;"	f	file:
ft_sqrt	srcs/math/ft_sqrt.c	/^int		ft_sqrt(int nb)$/;"	f
ft_stoul	srcs/stdlib/ft_stoul.c	/^unsigned long		ft_stoul(const char *str, int base)$/;"	f
ft_straddchar	srcs/str/ft_straddchar.c	/^char		*ft_straddchar(char *src, char c)$/;"	f
ft_strcat	srcs/str/ft_strcat.c	/^char	*ft_strcat(char *src, const char *dest)$/;"	f
ft_strchr	srcs/str/ft_strchr.c	/^char	*ft_strchr(const char *src, int c)$/;"	f
ft_strclr	srcs/str/ft_strclr.c	/^void	ft_strclr(char *src)$/;"	f
ft_strcmp	srcs/str/ft_strcmp.c	/^size_t		ft_strcmp(char *s1, char *s2)$/;"	f
ft_strcpy	srcs/str/ft_strcpy.c	/^char	*ft_strcpy(char *dest, const char *src)$/;"	f
ft_strdel	srcs/str/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	srcs/str/ft_strdup.c	/^char	*ft_strdup(const char *src)$/;"	f
ft_strequ	srcs/str/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	srcs/str/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	srcs/str/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	srcs/str/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	srcs/str/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	srcs/str/ft_strlen.c	/^size_t		ft_strlen(const char *str)$/;"	f
ft_strmap	srcs/str/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	srcs/str/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	srcs/str/ft_strncat.c	/^char	*ft_strncat(char *dest, const char *src, size_t n)$/;"	f
ft_strncmp	srcs/str/ft_strncmp.c	/^int			ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	srcs/str/ft_strncpy.c	/^char	*ft_strncpy(char *dest, const char *src, size_t n)$/;"	f
ft_strnequ	srcs/str/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	srcs/str/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnjoin	srcs/str/ft_strnjoin.c	/^char		*ft_strnjoin(char const *s1, char const *s2, size_t len)$/;"	f
ft_strnstr	srcs/str/ft_strnstr.c	/^char		*ft_strnstr(const char *str, const char *tofind, size_t n)$/;"	f
ft_stroneof	srcs/str/ft_stroneof.c	/^int		ft_stroneof(char c, char *str)$/;"	f
ft_strrchr	srcs/str/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int c)$/;"	f
ft_strsplit	srcs/str/ft_strsplit.c	/^char					**ft_strsplit(char const *s, char c)$/;"	f
ft_strstr	srcs/str/ft_strstr.c	/^char		*ft_strstr(const char *str, const char *tofind)$/;"	f
ft_strsub	srcs/str/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtol	srcs/stdlib/ft_strtol.c	/^long int				ft_strtol(const char *str, int base)$/;"	f
ft_strtrim	srcs/str/ft_strtrim.c	/^char	*ft_strtrim(char const *s)$/;"	f
ft_swap	srcs/perso/ft_swap.c	/^void				ft_swap(void *a, void *b, size_t nbytes)$/;"	f
ft_tab3free	srcs/tab/ft_tab3free.c	/^void	ft_tab3free(void ***tab)$/;"	f
ft_tab3newstr	srcs/tab/ft_tab3newstr.c	/^char	***ft_tab3newstr(size_t width, size_t height)$/;"	f
ft_tabdepth	srcs/tab/ft_tabdepth.c	/^int			ft_tabdepth(void **tab)$/;"	f
ft_tabfree	srcs/tab/ft_tabfree.c	/^void	ft_tabfree(void **tab)$/;"	f
ft_tabintcpy	srcs/tab/ft_tabintcpy.c	/^int			**ft_tabintcpy(int **array, size_t width)$/;"	f
ft_tablen	srcs/tab/ft_tablen.c	/^size_t		ft_tablen(char **tab)$/;"	f
ft_tabnewint	srcs/tab/ft_tabnewint.c	/^int			**ft_tabnewint(size_t width, size_t height)$/;"	f
ft_tabnewsize_t	srcs/tab/ft_tabnew.c	/^size_t	**ft_tabnewsize_t(size_t width, size_t height)$/;"	f
ft_tabnewsize_t	srcs/tab/ft_tabnewsize_t.c	/^size_t		**ft_tabnewsize_t(size_t width, size_t height)$/;"	f
ft_tabnewstr	srcs/tab/ft_tabnewstr.c	/^char	**ft_tabnewstr(size_t width, size_t height)$/;"	f
ft_tabstrcpy	srcs/tab/ft_tabstrcpy.c	/^char		**ft_tabstrcpy(char **str)$/;"	f
ft_tolower	srcs/str/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	srcs/str/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_v_flip	srcs/tab/ft_v_flip.c	/^void		ft_v_flip(void **array, size_t columns, size_t rows, size_t nbytes)$/;"	f
ft_vec3cpy	srcs/gfx/ft_vec3cpy.c	/^void	ft_vec3cpy(t_vec3 *vec_from, t_vec3 *vec_to)$/;"	f
ft_vec3new	srcs/gfx/ft_vec3new.c	/^t_vec3		*ft_vec3new(double x, double y, double z)$/;"	f
ft_vec3populate	srcs/gfx/ft_vec3populate.c	/^void		ft_vec3populate(t_vec3 *to_vec3, double x, double y, double z)$/;"	f
ft_xmpnew	srcs/gfx/ft_xmpnew.c	/^t_img			*ft_xmpnew(void *mlx, char *xmp, size_t x, size_t y)$/;"	f
g	includes/libft_struct.h	/^	unsigned char	g;$/;"	m	struct:s_color
get_line	srcs/perso/get_next_line.c	/^static int			get_line(t_str *buffer, int *num_char)$/;"	f	file:
get_next_line	srcs/perso/get_next_line.c	/^int					get_next_line(const int fd, char **line)$/;"	f
image	includes/libft_struct.h	/^	void			*image;$/;"	m	struct:s_img
image	includes/libft_struct.h	/^	void			*image;$/;"	m	struct:s_mlx
image_addr	includes/libft_struct.h	/^	char			*image_addr;$/;"	m	struct:s_mlx
image_addr	includes/libft_struct.h	/^	void			*image_addr;$/;"	m	struct:s_img
lenght	srcs/stdlib/ft_stoul.c	/^static int			lenght(char *str, int base)$/;"	f	file:
mlx_ptr	includes/libft_struct.h	/^	void			*mlx_ptr;$/;"	m	struct:s_mlx
name	includes/libft_struct.h	/^	char			*name;$/;"	m	struct:s_fd
next	includes/libft_struct.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	includes/libft_struct.h	/^	struct s_str	*next;$/;"	m	struct:s_str	typeref:struct:s_str::s_str
path	includes/libft_struct.h	/^	char			*path;$/;"	m	struct:s_fd
pos	includes/libft_struct.h	/^	int				pos;$/;"	m	struct:s_fd
pos	srcs/stdlib/ft_stoul.c	/^static int			pos(int c, int base)$/;"	f	file:
r	includes/libft_struct.h	/^	unsigned char	r;$/;"	m	struct:s_color
read_buff	srcs/perso/get_next_line.c	/^static int			read_buff(t_str **buffer, int fd)$/;"	f	file:
rights	includes/libft_struct.h	/^	int				rights;$/;"	m	struct:s_fd
s_color	includes/libft_struct.h	/^typedef struct		s_color$/;"	s
s_fd	includes/libft_struct.h	/^typedef	struct		s_fd$/;"	s
s_img	includes/libft_struct.h	/^typedef struct		s_img$/;"	s
s_list	includes/libft_struct.h	/^typedef struct		s_list$/;"	s
s_mlx	includes/libft_struct.h	/^typedef struct		s_mlx$/;"	s
s_pix	includes/libft_struct.h	/^typedef struct		s_pix$/;"	s
s_str	includes/libft_struct.h	/^typedef struct		s_str$/;"	s
s_vec3	includes/libft_struct.h	/^typedef struct		s_vec3$/;"	s
s_vec3u	includes/libft_struct.h	/^typedef struct		s_vec3u$/;"	s
size_x	includes/libft_struct.h	/^	int				size_x;$/;"	m	struct:s_img
t_color	includes/libft_struct.h	/^}					t_color;$/;"	t	typeref:struct:s_color
t_fd	includes/libft_struct.h	/^}					t_fd;$/;"	t	typeref:struct:s_fd
t_img	includes/libft_struct.h	/^}					t_img;$/;"	t	typeref:struct:s_img
t_list	includes/libft_struct.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_mlx	includes/libft_struct.h	/^}					t_mlx;$/;"	t	typeref:struct:s_mlx
t_pix	includes/libft_struct.h	/^}					t_pix;$/;"	t	typeref:struct:s_pix
t_str	includes/libft_struct.h	/^}					t_str;$/;"	t	typeref:struct:s_str
t_vec3	includes/libft_struct.h	/^}					t_vec3;$/;"	t	typeref:struct:s_vec3
t_vec3u	includes/libft_struct.h	/^}					t_vec3u;$/;"	t	typeref:struct:s_vec3u
win_ptr	includes/libft_struct.h	/^	void			*win_ptr;$/;"	m	struct:s_mlx
write_line	srcs/perso/get_next_line.c	/^static int			write_line(t_str **current, char **target, int num_char)$/;"	f	file:
x	includes/libft_struct.h	/^	double			x;$/;"	m	struct:s_vec3
x	includes/libft_struct.h	/^	int				x;$/;"	m	struct:s_pix
x	includes/libft_struct.h	/^	size_t			x;$/;"	m	struct:s_vec3u
y	includes/libft_struct.h	/^	double			y;$/;"	m	struct:s_vec3
y	includes/libft_struct.h	/^	int				y;$/;"	m	struct:s_pix
y	includes/libft_struct.h	/^	size_t			y;$/;"	m	struct:s_vec3u
z	includes/libft_struct.h	/^	double			z;$/;"	m	struct:s_vec3
z	includes/libft_struct.h	/^	int				z;$/;"	m	struct:s_pix
z	includes/libft_struct.h	/^	size_t			z;$/;"	m	struct:s_vec3u
